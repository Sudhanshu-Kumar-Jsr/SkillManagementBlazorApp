@page "/admin/users"
@inject AdminService AdminService

<h3>All Users and Their Skills</h3>

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index:1080;">
    @if (!string.IsNullOrEmpty(notificationMessage))
    {
        <div class="toast show text-white @toastColor" role="alert">
            <div class="d-flex">
                <div class="toast-body">@notificationMessage</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="HideNotification"></button>
            </div>
        </div>
    }
</div>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var group in users.GroupBy(u => u.Name))
    {
        <h5 class="mt-4 text-primary">Name: @group.Key</h5>

        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>SL No.</th>
                    <th>Skill Name</th>
                    <th>Proficiency Level</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < group.Count(); i++)
                {
                    var skill = group.ElementAt(i);
                    <tr>
                        <td>@(i + 1)</td>
                        <td>
                            @if (editingSkill?.Id == skill.Id)
                            {
                                <InputText @bind-Value="editingSkill.Name" class="form-control" />
                            }
                            else
                            {
                                @skill.SkillName
                            }
                        </td>
                        <td>
                            @if (editingSkill?.Id == skill.Id)
                            {
                                <InputText @bind-Value="editingSkill.ProficiencyLevel" class="form-control" />
                            }
                            else
                            {
                                @skill.ProficiencyLevel
                            }
                        </td>
                        <td>
                            @if (editingSkill?.Id == skill.Id)
                            {
                                <button class="btn btn-success btn-sm me-2" @onclick="() => SaveEdit(skill.Id)">Save</button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                            }
                            else
                            {
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditSkill(skill)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteSkill(skill.Id)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    List<UserSkillView>? users;
    SkillDto? editingSkill;
    string? notificationMessage;
    string toastColor = "bg-success";

    protected override async Task OnInitializedAsync()
    {
        users = await AdminService.GetAllUsersWithSkills();
    }

    async Task ShowNotification(string message, string color = "bg-success")
    {
        notificationMessage = message;
        toastColor = color;
        StateHasChanged();
        await Task.Delay(4000);
        notificationMessage = null;
        StateHasChanged();
    }

    void HideNotification() => notificationMessage = null;

    void EditSkill(UserSkillView skill)
    {
        editingSkill = new SkillDto
            {
                Id = skill.Id,
                Name = skill.SkillName,
                ProficiencyLevel = skill.ProficiencyLevel
            };
    }

    void CancelEdit() => editingSkill = null;

    async Task SaveEdit(int id)
    {
        if (editingSkill == null)
            return;

        if (string.IsNullOrWhiteSpace(editingSkill.Name) || string.IsNullOrWhiteSpace(editingSkill.ProficiencyLevel))
        {
            await ShowNotification("Both Skill Name and Proficiency Level are required!", "bg-warning");
            return;
        }

        var ok = await AdminService.UpdateSkill(editingSkill);
        if (ok)
        {
            users = await AdminService.GetAllUsersWithSkills();
            editingSkill = null;
            await ShowNotification("Skill updated successfully!", "bg-success");
        }
        else
        {
            await ShowNotification("Failed to update skill!", "bg-danger");
        }
    }

    async Task DeleteSkill(int id)
    {
        var ok = await AdminService.DeleteSkill(id);
        if (ok)
        {
            users = await AdminService.GetAllUsersWithSkills();
            await ShowNotification("Skill deleted successfully!", "bg-success");
        }
        else
        {
            await ShowNotification("Failed to delete skill!", "bg-danger");
        }
    }
}
