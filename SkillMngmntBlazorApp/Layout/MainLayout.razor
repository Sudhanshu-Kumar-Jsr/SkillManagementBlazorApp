@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using SkillMngmntBlazorApp.Services.SkillMngmntBlazorApp.Services

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 bg-light d-flex justify-content-between align-items-center">           
                    @if (user?.Identity?.IsAuthenticated == true)
                    {
                        <div>
                            <span class="me-3">
                                👋 Hello, <strong>@user.Identity.Name</strong>
                                <small class="text-muted">
                                    (@string.Join(", ", user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value)))
                                </small>
                            </span>
                            <button class="btn btn-outline-danger btn-sm" @onclick="Logout">Logout</button>
                        </div>
                    }
               @if (user?.Identity?.IsAuthenticated == false)
                    {
                    <div>
                        <NavLink href="/login" class="btn btn-outline-primary btn-sm me-2">Login</NavLink>
                        <NavLink href="/register" class="btn btn-outline-secondary btn-sm">Register</NavLink>
                    </div>
                    }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        user = authState.User;
        StateHasChanged();
    }

    private async Task Logout()
    {
        if (AuthStateProvider is JwtAuthStateProvider jwtProvider)
        {
            await jwtProvider.MarkUserAsLoggedOut();
            Nav.NavigateTo("/login", forceLoad: true);
        }
    }
}
